ARM GAS  /tmp/ccw2xcej.s 			page 1


   1              	# 1 "start.S"
   1              	/*
   0              	
   0              	
   2              	 * =====================================================================================
   3              	 *
   4              	 *       Filename:  start.S
   5              	 *
   6              	 *    Description:  arm gcc 通用初始化文件
   7              	 *
   8              	 *        Version:  1.1
   9              	 *        Created:  2011-1-22 21:31:51
  10              	 *       Revision:  none
  11              	 *       Compiler:  gcc
  12              	 *
  13              	 *         Author:  renwei
  14              	 *				Modified：yecunkui
  15              	 *        Company:  HUST
  16              	 *
  17              	 * =====================================================================================
  18              	 */
  19              	
  20              	/*
  21              		.S格式意味着可以使用宏定义如#define
  22              		#include "xxx.h", 但不能有函数声明和变量声明
  23              	*/
  24              	
  25              	/* Stack Sizes */
  26              	.set  UND_STACK_SIZE, 0x00000040		/* stack for "undefined instruction" interrupts	*/
  27              	.set  ABT_STACK_SIZE, 0x00000040		/* stack for "abort" interrupts	*/
  28              	.set  FIQ_STACK_SIZE, 0x00000040		/* stack for "FIQ" interrupts	*/
  29              	.set  IRQ_STACK_SIZE, 0x00000100		/* stack for "IRQ" normal interrupts	*/
  30              	.set  SYS_STACK_SIZE, 0x00000400		/* stack for "SYS" system mode	*/
  31              	
  32              	/* Standard definitions of Mode bits and Interrupt (I & F) flags in PSRs (program status registers)
  33              	.set  MODE_USR, 0x10            		/* Normal User Mode	*/
  34              	.set  MODE_FIQ, 0x11            		/* FIQ Processing Fast Interrupts Mode	*/
  35              	.set  MODE_IRQ, 0x12            		/* IRQ Processing Standard Interrupts Mode	*/
  36              	.set  MODE_SVC, 0x13            		/* Supervisor Processing Software Interrupts Mode	*/
  37              	.set  MODE_ABT, 0x17            		/* Abort Processing memory Faults Mode	*/
  38              	.set  MODE_UND, 0x1B            		/* Undefined Processing Undefined Instructions Mode	*/
  39              	.set  MODE_SYS, 0x1F            		/* System Running Priviledged Operating System Tasks  Mode	*/
  40              	
  41              	.set  I_BIT, 0x80               		/* when I bit is set, IRQ is disabled (program status registers) 
  42              	.set  F_BIT, 0x40               		/* when F bit is set, FIQ is disabled (program status registers) 
  43              	
  44              	/* ARM 异常中断向量表开始 */
  45              	.section .vector,"a"
  46              	    .global vector_table
  47              	vector_table:
  48 0000 18F09FE5 	    ldr pc, reset_vector				/* rest */
  49 0004 18F09FE5 	    ldr pc, undef_vector				/* undefine */
  50 0008 18F09FE5 	    ldr pc, swi_vector					/* software interrupt */
  51 000c 18F09FE5 	    ldr pc, prefech_vector			/* prefetch */
  52 0010 18F09FE5 	    ldr pc, data_abort_vector		/* data abort */
  53 0014 04F09FE5 	    ldr pc, reset_vector				/* reserver */
  54              	    /* ldr pc, irq_vector	*/		/* IRQ */
ARM GAS  /tmp/ccw2xcej.s 			page 2


  55 0018 20F11FE5 	    ldr pc, [pc, #-0x0120]			/* Vector from VICAddress */
  56              	    														/* 0x18+0x08-0x0120 == 0xFFFFFF00 */
  57 001c 14F09FE5 	    ldr pc, fiq_vector					/* FIQ */
  58              	
  59              		.global vector_ref_tbl
  60              	vector_ref_tbl:
  61              	reset_vector:
  62 0020 00000000 	    .long   start
  63              	undef_vector:
  64 0024 00000000 	    .long   undef_handler
  65              	swi_vector:
  66 0028 00000000 	    .long   swi_handler
  67              	prefech_vector:
  68 002c 00000000 	    .long   prefetch_handler
  69              	data_abort_vector:
  70 0030 00000000 	    .long   data_abort_handler
  71              	irq_vector:
  72 0034 00000000 	    .long   irq_handler
  73              	fiq_vector:
  74 0038 00000000 	    .long   fiq_handler
  75              	
  76              	/* ARM 异常中断向量表结束 */
  77              	
  78              	
  79              		.text
  80              		.code 32	//Sets the instruction width in bits.
  81              							//Use 16 for Thumb and 32 for ARM assembly.
  82              		.align	2
  83              		.global	start
  84              	start:
  85              	
  86              	   /* Added by yecunkui */
  87              	   /* Setup a stack for each mode - note that this only sets up a usable stack
  88              				for User mode.   Also each mode is setup with interrupts initially disabled. */
  89              	
  90 0000 CC109FE5 	   	ldr		r1, =p_intstack
  91 0004 000091E5 	   	ldr		r0,[r1]
  92 0008 DBF021E3 		msr     CPSR_c, #MODE_UND|I_BIT|F_BIT 	/* Undefined Instruction Mode  */
  93 000c 00D0A0E1 	 	mov     sp, r0
  94 0010 400040E2 		sub     r0, r0, #UND_STACK_SIZE
  95 0014 D7F021E3 		msr     CPSR_c, #MODE_ABT|I_BIT|F_BIT 	/* Abort Mode */
  96 0018 00D0A0E1 	 	mov     sp, r0
  97 001c 400040E2 		sub     r0, r0, #ABT_STACK_SIZE
  98 0020 D1F021E3 		msr     CPSR_c, #MODE_FIQ|I_BIT|F_BIT 	/* FIQ Mode */
  99 0024 00D0A0E1 	 	mov     sp, r0
 100 0028 400040E2 		sub     r0, r0, #FIQ_STACK_SIZE
 101 002c D2F021E3 		msr     CPSR_c, #MODE_IRQ|I_BIT|F_BIT 	/* IRQ Mode */
 102 0030 00D0A0E1 		mov     sp, r0
 103 0034 010C40E2 	 	sub     r0, r0, #IRQ_STACK_SIZE
 104 0038 DFF021E3 	 	msr		CPSR_c, #MODE_SYS|I_BIT|F_BIT		/* System Mode	*/
 105 003c 00D0A0E1 	 	mov		sp, r0
 106 0040 010B40E2 	 	sub		r0, r0, #SYS_STACK_SIZE
 107 0044 53F021E3 	 	msr		CPSR_c, #MODE_SVC|F_BIT		/* Supervisor Mode */
 108 0048 00D0A0E1 	 	mov		sp, r0
 109              	
 110              	    /*
 111              	     * initilize ARM's mode
ARM GAS  /tmp/ccw2xcej.s 			page 3


 112              	     * supervisor mode FIQ/IRQ disable
 113              	     */
 114              	     //如果要同时禁止IRQ中断和FIQ中断，cpsr应赋值为0xd3
 115              	    /* msr  cpsr, #0xd3 */
 116              	
 117              	    /*
 118              	     * load stack pointer, frame pointer
 119              	     */
 120              	
 121              	    /* ldr  r0, =p_intstack  load stack pointer, p_intstack is bottem of stack */
 122              	    /* ldr  sp, [r0]	*/
 123 004c 00B0A0E3 	    mov  fp, #0        /* ARM mode frame pointer*/
 124 0050 0070A0E3 	    mov  r7, #0        /* Thumb mode frame pointer */
 125              	
 126              	    /*
 127              	     *  call hardware_init_hook
 128              	     */
 129 0054 7C009FE5 	    ldr   r0, =hardware_init_hook /* necessary hardware initialize */
 130 0058 000050E3 	    cmp   r0, #0x00
 131 005c 0FE0A011 	    movne lr, pc
 132 0060 00F0A011 	    movne pc, r0
 133              	
 134              	/* 初始化BSS段 对应的内存区域必须清零 */
 135              	start_1:
 136              	    /*
 137              	     *  bss clear
 138              	     */
 139 0064 70109FE5 	    ldr  r1, =__bss_start
 140 0068 70209FE5 	    ldr  r2, =__bss_end
 141 006c 020051E1 	    cmp  r1,r2
 142 0070 0300002A 	    bhs  start_3
 143 0074 0000A0E3 	    mov  r0,#0
 144              	start_2:
 145 0078 040081E4 	    str  r0,[r1],#4
 146 007c 020051E1 	    cmp  r1, r2
 147 0080 FCFFFF3A 	    blo  start_2
 148              	
 149              	/* 初始化.data段，从ROM拷贝数据到RAM，如数据本身已在RAM中则不用拷贝 */
 150              	start_3:
 151              	
 152              	    /*
 153              	     *  copy data from rom
 154              	     *  ROM:  from__idata_start to  __idata_end
 155              		 *  RAM: to __data_start
 156              	     */
 157 0084 58109FE5 	    ldr  r1, =__idata_start
 158 0088 58309FE5 	    ldr  r3, =__idata_end
 159 008c 030051E1 	    cmp  r1, r3
 160 0090 0400002A 	    bhs  start_5   /* start_5 */
 161 0094 50209FE5 	    ldr  r2, =__data_start
 162              	start_4:
 163 0098 040091E4 	    ldr  r0, [r1],#4
 164 009c 040082E4 	    str  r0, [r2],#4
 165 00a0 030051E1 	    cmp  r1, r3
 166 00a4 FBFFFF3A 	    blo  start_4
 167              	     /*
 168              	     *   call software_init_hook
ARM GAS  /tmp/ccw2xcej.s 			page 4


 169              	     */
 170              	start_5:
 171 00a8 40009FE5 	    ldr   r0, =software_init_hook
 172 00ac 000050E3 	    cmp   r0, #0x00
 173 00b0 0FE0A011 	    movne lr, pc
 174 00b4 00F0A011 	    movne pc, r0
 175              	    /*
 176              	     *  call main
 177              	     */
 178              	start_6:
 179 00b8 FEFFFFEB 	    bl	main
 180              	
 181              	/* exception handlers */
 182              	 	.text
 183              	    .align 2
 184              	    .global undef_handler  /* UNDEF handler */
 185              	undef_handler:
 186 00bc FEFFFFEA 	    b     undef_handler /* target_exc_handler(lr,spsr,exceptno) */
 187              	
 188              	    .text
 189              	    .align 2
 190              	    .global swi_handler /* SWI handler */
 191              	swi_handler:
 192 00c0 FEFFFFEA 	    b     swi_handler	/* target_exc_handler(lr,spsr,exceptno) */
 193              	
 194              	
 195              	    .text
 196              	    .align 2
 197              	    .global prefetch_handler
 198              	prefetch_handler:	/* PREFETCH handler */
 199 00c4 FEFFFFEA 	    b     prefetch_handler
 200              	
 201              	    .text
 202              	    .align 2
 203              	    .global data_abort_handler
 204              	data_abort_handler:		/* DATA ABORT handler */
 205 00c8 FEFFFFEA 	    b     data_abort_handler
 206              	
 207              	
 208              	    .text
 209              	    .align 2
 210              	    .global fiq_handler
 211              	fiq_handler:	/* FIQ handler */
 212 00cc FEFFFFEA 	    b     fiq_handler
 213              	
 214              	
 215              	    .text
 216              	    .align 2
 217              	    .global irq_handler
 218              	irq_handler:	/* IRQ handler */
 219 00d0 FEFFFFEA 			b     irq_handler
 219      00000000 
 219      00000000 
 219      00000000 
 219      00000000 
ARM GAS  /tmp/ccw2xcej.s 			page 5


DEFINED SYMBOLS
             start.S:26     *ABS*:00000040 UND_STACK_SIZE
             start.S:27     *ABS*:00000040 ABT_STACK_SIZE
             start.S:28     *ABS*:00000040 FIQ_STACK_SIZE
             start.S:29     *ABS*:00000100 IRQ_STACK_SIZE
             start.S:30     *ABS*:00000400 SYS_STACK_SIZE
             start.S:33     *ABS*:00000010 MODE_USR
             start.S:34     *ABS*:00000011 MODE_FIQ
             start.S:35     *ABS*:00000012 MODE_IRQ
             start.S:36     *ABS*:00000013 MODE_SVC
             start.S:37     *ABS*:00000017 MODE_ABT
             start.S:38     *ABS*:0000001b MODE_UND
             start.S:39     *ABS*:0000001f MODE_SYS
             start.S:41     *ABS*:00000080 I_BIT
             start.S:42     *ABS*:00000040 F_BIT
             start.S:47     .vector:00000000 vector_table
             start.S:61     .vector:00000020 reset_vector
             start.S:48     .vector:00000000 $a
             start.S:63     .vector:00000024 undef_vector
             start.S:65     .vector:00000028 swi_vector
             start.S:67     .vector:0000002c prefech_vector
             start.S:69     .vector:00000030 data_abort_vector
             start.S:73     .vector:00000038 fiq_vector
             start.S:60     .vector:00000020 vector_ref_tbl
             start.S:62     .vector:00000020 $d
             start.S:84     .text:00000000 start
             start.S:185    .text:000000bc undef_handler
             start.S:191    .text:000000c0 swi_handler
             start.S:198    .text:000000c4 prefetch_handler
             start.S:204    .text:000000c8 data_abort_handler
             start.S:71     .vector:00000034 irq_vector
             start.S:218    .text:000000d0 irq_handler
             start.S:211    .text:000000cc fiq_handler
             start.S:82     .text:00000000 $a
             start.S:135    .text:00000064 start_1
             start.S:150    .text:00000084 start_3
             start.S:144    .text:00000078 start_2
             start.S:170    .text:000000a8 start_5
             start.S:162    .text:00000098 start_4
             start.S:178    .text:000000b8 start_6
             start.S:219    .text:000000d4 $d

UNDEFINED SYMBOLS
p_intstack
hardware_init_hook
__bss_start
__bss_end
__idata_start
__idata_end
__data_start
software_init_hook
main
